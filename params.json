{"name":"Tersehandling","tagline":"Event backend","body":"TerseHandling\r\n=============\r\n\r\n`TerseHandling` is a framework designed for _sketching_ generic input events, i.e., transforming input events into high-level user-defined actions,\r\nmainly implemented using [generic programming techniques](http://en.wikipedia.org/wiki/Generics_in_Java).\r\nIt provides its own set of events which supports up to [6-DOFs]( http://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics) ),\r\ntogether with a set of *agents* which parses them, i.e., identifies object *grabbers* and the *actions* they should perform,\r\nallowing the developer to focus on implementing those actions. A developer workflow using `TerseHandling` would typically involve the following tasks:\r\n\r\n  * Choose one among of the provided `TerseHandling` *Agents* (extending it if necessary) and attach to it an event listening mechanism.\r\n  * Reduce (hardware or software) input events into their `TerseHandling` counterparts.\r\n  * Choose a callback mechanism: direct actionless approach (non-generic programming), or high-level action-driven (which extensively uses generic programming). In the latter case:\r\n    * Define *shortcuts* over `TerseHandling` events to trigger different actions using *Profiles*.\r\n    * Implement the actions to be performed by object grabbers.\r\n    \r\nfor details please refer to our [wiki](https://github.com/remixlab/tersehandling/wiki)\r\n\r\n`TerseHandling` is a full-fledged, stand-alone library which will become the new event backend for the upcoming Proscene-2 series,\r\nbut can also backed up the event sub-system of any other third party *Java* or *Processing* library.\r\n\r\n# Author, core developer and maintainer\r\n\r\n[Jean Pierre Charalambos](http://disi.unal.edu.co/profesores/pierre/), [National University of Colombia](http://www.unal.edu.co)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}